2016-??-??: Version 0.1.33 released

    Fixed bugs with array typedefs.

    Fixed a bug where a top-level function-local variable was allowed
    to be defined with the same name as a function parameter.
    For example: void f(int n) { int n; }
    The compiler now puts that top level and the function parameters
    in the same scope.

    Fixed a bug with an optimization of boolean expressions
    evaluated for their numerical value.

    Fixed a potential bug with va_arg() (stdarg.h) by avoiding the
    use of the Y register, to comply with the CMOC register convention.

    The PROGRAM name in main.cpp can now be defined as a preprocessor
    identifier. By default, PROGRAM is a C++ global variable ("cmoc").

    New command-line option --allow-undef-func makes the compiler
    tolerate calls to undefined functions. The assembly pass will fail.
    Should be used with the -c option.

    Fixed some portability problems to help compile under Visual C++.

    The writecocofile command now declares an error if extra arguments
    are given on the command line.

2016-09-17: Version 0.1.32 released

    Fixed bugs with the /=, %=, <<= and >>= operators.
    
    The compiler now checks that operators that require an l-value
    are actually applied on one. For example, &(n >> 1) is illegal
    and is now reported as such. 

2016-09-12: Version 0.1.31 released

    Inline assembly: When an asm{} block refers to a C variable
    whose name is that of a register, such a reference must now be
    preceded by a colon character, which acts as an escape character.
    For example: char b; asm { lda :b }
    When no such colon appears, the name is now always taken to be
    a reference to the register. Existing inline assembly statements
    may need to be fixed accordingly to resolve assembly errors.     

    Added atoi() and atoui() to the standard library.

    Fixed a bug with the return statement that omitted the sign
    extension when returning a signed character from a function
    returning signed int.

    Fixed a bug where wrong code was emitted for the multiplication
    of two members of a struct, where one of the members was the
    first of the struct.

    Fixed a bug where sizeof() on a string literal returned 2
    instead of the length of the string plus one. A string literal
    is now typed as an array of characters instead of a pointer to
    a character.

    Fixed a bug where printf() and putstr() failed to translate some
    '\n' characters into a carriage return under Color Basic. In the
    case of printf(), it was when the '\n' appeared in the argument
    of a %s placeholder.

    CMOC now rejects a variadic function that has no named argument,
    e.g., void f(...), as does GNU GCC. 

    Restored some level 2 optimizations that had been suspended
    since version 0.1.29. 

2016-08-21: Version 0.1.30 released

    Fixed a bug with the optimization of a division of a signed
    value by 10.

    Added support for extern declarations as used by WinCMOC,
    a project by Derek John Evans.

2016-08-07: Version 0.1.29 released

    Enumerations (enum) are now supported. See the manual
    for details.

    Relational operators on byte operands do not promote to int
    anymore, for efficiency reasons. This is consistent with CMOC's
    treatment of other binary operators.

    Fixed a bug in the intelhex2srec script. 

    Fixed the cmoc.h function sbrkmax() so that it returns zero
    bytes available if the program has been loaded after the
    stack space.

    The compiler now warns when a string uses a numerical escape
    sequence that is out of the 0 to 255 range (e.g., \xFFF or \0777).

2016-07-01: Version 0.1.28 released

    Typed function pointer declarations are now supported.
    For example, a variable of type int (*)(char, int[])
    can now be declared to receive the address of a function
    accepting a char and an array of ints and returning and int.
    Note that despite the typed syntax, the actual type of the
    function pointer variable is still void *. Also, when invoking
    a function through a pointer, the return type is still assumed
    to be int. If the actual function returns a char, the call
    must use a cast, e.g., char c = (char) (*pf)(). 

    A function that takes no arguments can now be declared with
    a argument list containing only the `void' keyword, e.g.,
    int f(void).

    Referring to an undefined struct is now allowed except when
    declaring a variable of that type. For example, a variable
    declaration like "struct S *p;" is allowed but not "struct S s;".
    Also, a function prototype like "struct S *f();" is allowed,
    but not "struct S f();".

    Anonymous structs are now supported. For example,
    struct { int n; } g; int main() { g.n = 42; return g.n; }

    Assigning a struct value to another is now supported (e.g.,
    struct S a, b; a = b;). Initializing a struct from another
    is also supported (e.g., struct S a; struct S b = a;).

    A typedef can now be used for an array type, e.g.,
    typedef int A[2];

    The following error messages have been downgraded to warnings:
    - assigning to byte from larger type
    - assigning to byte from larger constant
    - assignment to type 'A *' from incompatible pointer type 'B *'
    - true and false expressions of conditional are not of the same type

    The `extern' keyword is now accepted but the declarations it
    is used for are ignored, as separate compilation is not supported.

    The `static' keyword is now accepted on global declarations but
    does not affect the declarations it is used for. Those declarations
    are processed as if the keyword were not present.

    The `register' keyword is now accepted but ignored.

    The goto statement is now supported. A function's body must not
    define the same identifier-labeled statement more than once. 

    The C preprocessor now receives the -nostdinc and -undef options
    to make sure that no header file or predefined identifier (e.g.,
    __GNUC__) of the system C compiler is included in the compilation.

    The compiler now issues an error message if a pointer to a
    struct is returned from a function that must return a pointer
    to a different struct.  

    The compiler now issues an error message if an unsupported type
    keyword, like long, float or double, is used in a program.

    The writecocofile now avoids warning about lost granules if those
    granules are in track 34. This track may be occupied by a program
    to be invoked by the DOS command.

2016-06-15: Version 0.1.27 released

    Fixed a crash that happened when using a struct value in a
    context that requires an r-value, e.g., a struct as an if()
    condition.

    Fixed a bug where a conditional instruction, in an asm{} block,
    that targeted a C function was not emitted correctly, which caused
    the assembler to declare an error.

    Fixed an optimizer bug.

    The configure script now checks that POSIX.1 function strcasecmp()
    is available.

2016-05-19: Version 0.1.26 released

    Fixed another optimizer bug that affected ternary expressions.

    Fixed the writecocofile tool so that the directory entries it
    creates are compatible with EDTASM.  

    Fixed a bug in the -d option of the writecocofile command that
    made it list lost granules as being free. The lost granules
    (which are allocated in the FAT but not used by any directory
    entry) are now listed.

    setConsoleOutHook() is now defined in pure assembly in stdlib.inc
    instead of being defined as a C function in cmoc.h.

    The emitCode() virtual functions in the compiler itself are now
    const, which helps prove that emitting code does not change the
    syntax tree objects.

    Added a maintainer's guide: doc/cmoc-implementation.markdown

2016-05-01: Version 0.1.25 released

    Fixed an optimizer bug that affected ternary expressions
    (a ? b : c).

    Clarified the public domain status of header files
    cmoc.h, stdlib.inc, stdlib-data.inc and vectrex.h.

    Resolved compilation issues for gcc 6.1.0.

2016-04-21: Version 0.1.24 released

    Fixed a bug where a program using the right shift operator
    with a non-constant number of bits to shift would not compile
    unless the program also used the left shift operator with a
    non-constant number of bits to shift. (The compilation would
    fail with an error message involving shiftLeft_end.)

    Fixed a bug affecting shifting byte expressions by a
    non-constant number of bits.

    Fixed a bug in inline assembly statements when a BRA
    or LBRA instruction would be used to jump to a C function
    (the program would not compile).

2016-04-17: Version 0.1.23 released

    Fixed a bug with the signed right shift operator (>>): when
    the left side is negative and the operator shifts more bits
    than the left side holds, the result is now -1 ($FFFF), 
    instead of zero.

    The compiler optimizes more cases of shift operations whose
    the number of bits to shift is a constant. The general case,
    where the number of bits to shift by is not known at compile
    time, is now handled by a standard library routine in order
    to reduce the inline code to a subroutine call.

    A function pointer is now considered to be of type void *
    instead of char *.

    Fixed a bug where dereferencing a void pointer would lead to
    a compiler crash instead of a proper error message. 

    Fixed a bug where a switch() inside another switch(), or inside
    a for/while/do-while, would cause the break and continue statements
    after the end of the inner switch to branch to the end of the
    inner switch, when it should have branched to the end of the
    outer switch/for/while/do-while.

    The standard function sbrk() now returns void * instead of char *.

    set_null_ptr_handler() and set_stack_overflow_handler() now expect
    a void * argument instead of char *.

    Added the section "Function pointers" to the manual. 

    The documentation files are now installed in $(prefix)/share/doc/cmoc
    instead of $(prefix)/share/doc/cmoc-$(VERSION). (The HTML manual
    is still not generated or installed, by default.)

2016-04-07: Version 0.1.22 released

    Fixed an optimizer bug that affected increments on a struct field
    in some situations.

2016-04-03: Version 0.1.21 released

    More low-level optimizations contributed by Jamie Cho.

    The coco.h header file now contains functions setConsoleOutHook()
    and resetConsoleOutHook() which allow the caller to redirect
    the characters produced by printf() and putchar() to any routine.

    New "#pragma limit X" directive. It is equivalent to the
    command-line option --limit=X, which forces a failure if
    the end of the program exceeds address X.

    CMOC now tolerates passing a non-negative constant integer
    as a function parameter of type pointer. For example,
    calling f(1024) for f(char *). 

    CMOC now supports references to C functions in inline assembly.
    This allows inline assembly to call a C function or to take
    its address.

    The <cmoc.h> header file now defines setConsoleOutHook(), which is
    useful to redirect the output of printf() to a user-defined routine.
    See the manual under the "Redirecting the output of printf()"
    section for details.

    Fixed a bug with the OS-9 implementation of exit(), which
    ignored that function's argument.

    Fixed a bug where compiling a program for OS-9 right after
    compiling it for Disk Basic would fail when assembling,
    because the .hex from the Disk Basic compilation was erroneously
    read by the assembler script (a09). The latter now starts by
    erasing the .hex file if one is present.

    Fixed a bug in printf() where a zero-padding hexadecimal value
    could be padding with the wrong character if printf()'s output
    callback was redirected to a routine that did not preserve
    register A. 

    Added support for octal constants.

    Removed the last traces of support for the as6809 assembler.
    (The LWTOOLS lwasm assembler is required.)

    Added basic tests for the --os9 option in src/Makefile.am.

    Header files assert.h, stdarg.h, coco.h and disk.h are now
    in the public domain.

    Header files hirestxt.h, 8-bit-wide-font.h and font4x7.h are
    not distributed with CMOC anymore, but will be distributed
    separately.

    The configure script now has the --without-writecocofile option,
    which allows the user to avoid compiling the writecocofile
    disk image tool.

    The configure script now checks for the env(1) command, which
    is used in src/Makefile.am.

2016-02-20: Version 0.1.20 released

    Several peephole optimizations have been added by Jamie Cho.
    The --no-peephole option is now deprecated in favor of -O0.
    -O1 can be used to disable Jamie's optimizations. The default
    is -O2, which includes all optimizations. 

    Fixed a bug where the compiler crashed when sizeof() was used
    on an unknown variable name and this sizeof() was used twice in
    a binary expression.  

    Fixed a bug where assembly code was still emitted for some
    functions that were not called from main(), neither directly
    or indirectly.

    CMOC now automatically displays the program start and end addresses,
    as well as the start and end of the writable data section, when the
    --verbose option is passed. The generated assembly file now contains
    symbols writable_globals_start and writable_globals_end.

    New command-line option --limit=X forces a failure if the end
    of the program, as indicated by the "program_end" listing symbol,
    exceeds address X (specified in hexadecimal).

    The error message indicating that a variable is already declared
    in the same scope now shows the line number of the previously
    seen declaration.

    writecocofile command: New option --newlines added to facilitate
    transfering a native Basic text file to a CoCo disk image, by
    converting the line endings to ASCII 13 and preceding the first
    line with an empty line. New option --stdout added to act like
    --read but print the file contents to standard output instead of
    writing it to a native file.

2016-01-11: Version 0.1.19 released

    Fixed a bug where a function-local function prototype crashed
    the compiler. Such prototypes now give an error message.
    Function prototypes must be declared at global scope.

    Fixed a bug where the wrong line number was given in the
    error message when a character variable was initialized with
    a function address.

    Fixed a bug where the compiler would crash when taking the
    sizeof() an unknown struct name.

    The compiler now accepts option --asm-cmd, which writes
    the assembly command in a file whose name is the same as the
    source filename but with a .cmd extension.

    The inline assembly directive (asm { ... }) now accepts
    balanced braces inside the main braces.

    The internal assembler script (a09) now accepts options
    --define and --no-blocks.

2015-12-19: Version 0.1.18 released

    To regenerate the configure script, GNU Automake 1.12 or later
    is now required, so that src/parser.hh gets generated, instead
    of src/parser.h.

    Fixed a bug with the mapping of writable global variables on
    the Vectrex: they are now mapped at $C880 as imposed by the
    console RAM mapping. Also, using the --org command-line option
    and using the #pragma org and data directives are now forbidden
    when targeting the Vectrex.    

    Fixed a bug where the compiler would crash on some comparisons of
    a function address with a constant.

    The compiler does not create an assembly file anymore when there
    are compilation errors.

    Changed the include guard in cmoc.h from _H_DIZZYTOAD to _H_CMOC.

2015-11-08: Version 0.1.17 released

    Added the --vectrex option to target the Vectrex video game console.
    Vectrex support, contributed by Johan Van den Brande, is experimental
    and partial at this point.

    Fixed a bug where declaring a character array in a const_data
    section (see the manual) with a string literal as the initializer
    was rejected despite the literal being a valid array to
    initialize with. 

    Fixed a bug where comparing an unsigned character to a signed
    character would give the wrong result because the comparison was
    not allowed to promote its operands to int as it is supposed to do.

    Fixed a bug that prevented the use of non trivial constant
    initializers in a const_data section (e.g., int n = -42 instead
    of int n = 42). This fix applies to array initializers also.

2015-10-12: Version 0.1.16 released

    Fixed a bug where multiplying a negative byte constant with a
    signed byte variable would generate an invalid load instruction
    (e.g., LDA #$FFFC for -4). This bug was discovered by upgrading
    the LWASM assembler from version 4.11 to 4.12.

    Added an optimization that removes a CMPB #0 between an
    LDB and a BEQ/BNE. (The load instruction sets the Z flag
    so no comparison with zero is needed.)

    Added an optimization for byte comparisons.

    Added an optimization for comparisons of register D with 0. 

2015-09-13: Version 0.1.15 released

    Embryonic support for OS-9. (Pass --os9 to cmoc. Requires lwasm.)

    Some comments in stdlib.inc have been surrounded with /* */
    to protect apostrophes from warnings by some C preprocessors
    ("missing terminating ' character"). 

    Mac OS X compilation options now automatically added by the
    configure script. It should not be necessary anymore to define
    any environment variables before compiling the CMOC sources.

    LWASM is now the default assembler instead of FrankASM. 

    Documented the fact that the writecocofile utility assumes
    a 35-track Disk Basic diskette image file.

2015-09-05: Version 0.1.14 released

    Fixed a binary operator optimization where 0xffb0 + byteVar
    would be generated as an 8-bit add, just because 0xffb0 is -80,
    which can be represented in a single byte. The constant 0xffb0
    is actually seen as unsigned by CMOC because it exceeds 0x7FFF,
    whereas -80 is explicitly signed, because it the signed constant
    +80 to which the negation operator is applied.  Therefore, 0xffb0
    + byteVar is now seen as an unsigned word plus a byte variable.

    Fixed a bug that prevented taking the sizeof() a row of a
    2-dimensional array, e.g., sizeof(a[0]). This fix enables the
    use of the common idiom sizeof(a) / sizeof(a[0]) to get the
    number of elements in array 'a' regardless how many dimensions
    it has.

    Fixed a false compilation error that would prevent initializing
    a void pointer variable with a void pointer expression.  

    Removed unused parts of the USim 6809 simulator to facilitate
    compilation under other operating systems. (6850 ACIA and X11
    support were removed.)

    memcpy() and memset() now return a void pointer, as in C.

    Added comments to standard header file <cmoc.h>.

    The resetPalette() function in <coco.h> now only fixes the CMP/RGB
    command bug if a 15 is seen in the code, to help confirm that the
    version of Basic is the one expected.

    New function paletteRGB() in <coco.h>: it presents an easier
    interface to specify red-green-blue color intensities. 

2015-08-24: Version 0.1.13 released

    Added a --srec option to have CMOC generate an executable
    in the Motorola SREC format:
    https://en.wikipedia.org/wiki/SREC_%28file_format%29

    Fixed a usim compilation problem under Cygwin.

    The <legacy.h> header file is now obsolete. Its contents are
    provided by <coco.h>.

    The <coco.h> header now defines uint8_t, int8_t, uint16_t
    and int16_t.

2015-08-09: Version 0.1.12 released

    Added support for unions.

    Fixed a crash on a string literal used as an array initializer.

    Fixed an assembly-level optimizer bug that would make an if()
    execute the else clause unconditionally in the presence of
    inline assembly.

    Added an optimization that removes any instruction that follows
    an unconditional branch without a label or other non-instruction
    element in between.

    Improved the shortening of long branches: more branches get
    shortened, but a branch does not get shortened if inline assembly
    appears between the branch and its destination.

    Now detecting case where a declaration refers to a struct whose
    name has been declared but whose members have not been defined.
    (Example: struct S; int main() { struct S x; [...] })

2015-08-08: Version 0.1.11 released

    Removed a divergence from C: the signedness of an additive of
    multiplicative operation is now the signedness of the left operand.

    Added an assembly-level peephole optimizer. To disable this phase,
    pass --no-peephole to cmoc.

    Improved the optimization of boolean expressions when they are
    used in if, while, do-while or for statements.

    Improved the optimization of some multiplications, divisions
    and modulos. Added an 8-bit assembly-language division routine
    to the standard library. Added a specialized unsigned byte division
    by 7 routine that takes about 30% of the time of the general 8-bit
    division routine. Added an unsigned word division by 10 that takes
    about 20% of the general 16-bit division routine. 

    Added a manual page (man cmoc).

2015-07-25: Version 0.1.10 released

    Fixed a compiler crash on initializing a character array with
    a string literal.

    Fixed a bug where occurrences of "0x" in a string literal would
    be replaced with "$" in the final executable.

    New --emit-uncalled option forces the compiler to emit assembly
    code even for functions that are not called by C code. This is
    useful when a function is only called by inline assembly code.

    A struct can now declare more than one member per semi-colon:
    struct S { int a, b; char *c, *d; }.

    Assembly-only functions are now allowed to refer to global
    variables. (Such references require no stack frame.)

    Uninitialized globals are now emitted contiguously so that
    all RMB-defined globals appear at the end of the default
    executable format, which helps shorten the .BIN file.

    Optimized expressions of the form sizeof(a) / sizeof(a[0])
    by evaluating them at compile time (avoids a 16-bit division
    at run time).

    Optimized some assignments to a byte location.

    Optimized while() and do-while() statements whose condition
    is always true (no code emitted for the condition).

    Optimized passing an array (address) as an argument to
    a function (2 instructions instead of 3).

    Optimization for "variable += constant" and "variable += variable".

    Fixed some memory leaks.

2015-07-12: Version 0.1.9 released

    Restructured the standard library so that only the needed
    portions are included in the final assembly program.
    For example, the printf() code is only assembled if that
    function is called by the C program. A program that calls
    no standard library function can save up to about 1900 bytes.
    An empty program is now around 50 bytes.

    Functions that are defined but not called are not emitted
    in the final assembly program. A function is considered
    called if it is called directly or if its address is taken.

    Fixed optimization of multiplication and division of
    constant operands so that the operation is signed only
    if both operands are signed.

    The stack frame is now setup with LEA instructions instead
    of TFR, which saves 4 cycles per function call. 

    Added a table of contents to the HTML manual.

2015-07-05: Version 0.1.8 released

    Integer constants are now of type int or unsigned int,
    but operators will interpret them as char or unsigned char
    when it optimizes the code without changing the meaning
    of the operation. Violations of this rule should be reported
    to the maintainer.

    A comparison of two expressions will only use a signed
    branch instruction (e.g., LBGT) if the two operands are
    signed expressions.

    Removed signedness warnings because they were sometimes
    superfluous or inappropriate.

    Fixed a signedness problem that caused an unjustified
    compilation warning. The sum or subtraction of an 'int' and
    an 'unsigned char' now has the signedness of the int.   

    Fixed a preprocessor incompatibility problem by having CMOC
    always pass -xc++ to the C preprocessor. This allows the
    user to use C++-style comments (// instead of only /* */).

    New function modifier keyword 'asm' tells the compiler that
    the function must not have a stack frame and will only contain
    inline assembly language (i.e., asm { ... } statements).
    This is useful when writing a function entirely in assembler
    for maximum performance.
    See the manual under "Assembly-only functions".

    Fixed a bug in hset() in support file coco.h, where the function
    would access the wrong address to get the graphics mode.

    Optimized bitwise operations between a variable (possibly cast
    as a byte) on the left side and a constant on the right side.
    Optimized more binary operations involving a constant on the
    right side.
    Optimized while and do-while conditions when they are ANDs
    or ORs of relational operators.

2015-06-27: Version 0.1.7 released

    Renamed the --ihex option to --usim to better reflect
    that it compiles for USim and not for Color Basic. 

    Fixed a bug where initializing a pointer from an
    incompatible array type would potentially crash the
    compiler.

    Fixed a bug where inline assembler that would use indirect
    addressing of a C variable (e.g., "jsr [someVariable]")
    would not assemble.

    Improved optimization of += and -= operators when the
    right side is a constant.

    Improved optimization of multiplication when the two
    sides are bytes, or when the two sides are variables
    or constants. 

    Added warnings about assigning to a pointer from an
    incompatible pointer type, from a non-constant integer
    expression, or from a negative constant.

    Added a command-line tool (install-coco-boot-loader) that
    writes the contents of a CoCo DECB .bin file to track 34
    of a DECB disk image. This makes the code in the .bin file
    (max 4608 bytes) executable by Disk Basic's DOS command.

    The generated assembler now contains a "program_start"
    label that indicates where the complete program begins
    in memory. (There was already a "program_end" label.) 

    The manual (cmoc-manual.html) now documents:
    - (Obsolete:) the fact that integer constants that fit
      in a byte are of type char or unsigned char depending
      on their sign;
    - the program_start and program_end labels, that indicate
      where the program is loaded in memory.
    - the --dos option, which can be used with the
      install-coco-boot-loader tool to make a program
      executable by Disk Basic's DOS command.

2015-06-21: Version 0.1.6 released

    Fixed a bug where all compilations would fail with the
    message "syntax error: #". This was related to a version
    of GCC's C preprocessor that is more recent than the one
    (4.6.3) with which CMOC was developed. CMOC has been
    adapted to be compatible with the bevahior of cpp 4.8.3.

    Added missing file src/support/legacy.h, which is included
    by src/support/coco.h.

    Added a sprintf() function. This function requires caution
    because it does not check if the buffer it is given is
    long enough for the text that gets written to it.

    Improved optimization with better detection of constant
    expressions, which helps remove if() conditions (when it is
    always true) or the if() and its body (when the condition is
    always false). Constant expressions used in some binary
    operators are also better detected.

    Improved optimization of the shift operators when the
    right side operand is constant.

2015-06-18: Version 0.1.5 released

    Fixed bad code generation for an expression that adds a
    constant to an array that was received as a function argument. 

    Added the --check-stack option to have CMOC insert run-time
    checks for stack overflows. A handler can be specified to
    handle a stack overflow and print the code address where
    it was detected, as well as the out-of-range stack pointer.
    See the manual for details.

    The standard library now does not include code related to
    null pointer checking when --check-null is not given.
    The same situation applies to stack overflow checking.

    Added small optimization for '*ptr++' case. 

    Fixed a bug in the 'writecocofile' utility where a file whose
    length was that of one granule (2304 bytes) would be written
    as an empty file.

2015-06-13: Version 0.1.4 released

    Added the --check-null option to have CMOC insert run-time
    checks for null pointers. A handler can be specified to
    handle an access to a null pointer and print the code address
    where it was detected. See the manual for details.

    Added the -D option to allow specifying #defines from the
    command line.

    Reduced the number of instructions required for an array
    initializer to initialize a pointer element with the address
    of an array variable.

    Fixed an internal compiler error that happened when referring
    to a member of an undefined struct. 

    Fixed a problem where executing an sbrk-using program for the
    second time without reloading it first would potentially
    execute invalid memory. Up to 0.1.3, CMOC assumed that the
    compiled program is intended to be executed only once, i.e.,
    that reloading the program is required to execute it again.

    Added #pragma exec_once to get the pre-0.1.4 behavior.

    The manual (cmoc-manual.html) now documents:
    - #pragma exec_once;
    - the calling convention;
    - the files generated by the compiler aside from the .bin file;
    - how to generate a ROM image for a cartridge;
    - the new --check-null option.

2015-06-09: Version 0.1.3 released

    Fixed a bug where some origin addresses were not accepted
    by the assembler script. (The error message would say
    "does not finish with valid type-1 record".)

    Added #pragma const_data [start|end] to separate writable
    global variables from the read-only ones and the code.
    See the manual for details. 

    The manual (cmoc-manual.html) now documents:
    - global array initializers;
    - separating writable global variables from the rest;
    - dynamic memory allocation with sbrk().

2015-06-07: Version 0.1.2 released

    Fixed a bug with assembler selection so that as6809 becomes
    usable again.

    Reworked the code generation to separate the data from the code.

2015-06-06: Version 0.1.1 released

    Fixed a bug where bad code was generated when the right-hand
    side of a +=, -= or *= operator was of pointer type.

    Fixed a compilation error involving GCC 4.9.2 vs. TreeSequence.cpp
    and ClassDef.cpp and their use of the deleter() templated function.
    This function has been removed (from util.h).

    Fixed a bug where character literals were considered unsigned
    even though CMOC's char type is signed.

    Fixed the lack of error message when passing a non-zero integer
    as an argument to a function that expects a pointer.

    Fixed the lack of error message when passing a pointer of the
    wrong type to a function that expects a non-void pointer.

    LWASM support: The compiler now takes the --lwasm option,
    which makes it use LWASM instead of FrankASM (as6809).
    Requires LWASM 4.11 or later, because of the use of option
    --pragma=forwardrefmax. Another way to request LWASM is to
    define the CMOC_LWASM environment variable (to any value).
    When compiling CMOC, the `configure' script now checks that
    lwasm accepts the --pragma=forwardrefmax option, if lwasm is
    found in the execution path.

    FrankASM support: If as6809 is not found when compiling CMOC
    but lwasm is found, the latter will be used by default by CMOC.

    The manual (cmoc-manual.html) now documents:
    - inline assembly;
    - how to redirect the output of printf();
    - the default origin address, which is 0x2800;
    - the "interrupt" keyword, to end a function with RTI.

2015-05-31: Version 0.1.0 released

    First public release.
